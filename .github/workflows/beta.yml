name: EAS Build

on:
  push:
    tags:
      - 'beta-*'

  workflow_dispatch:
    inputs:
      platform:
        description: "Plateforme à builder"
        required: true
        default: all
        type: choice
        options:
          - all
          - android
          - ios
      create_release:
        description: "Créer une release GitHub ?"
        required: true
        default: "false"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  build:
    name: Build application
    runs-on: ubuntu-latest

    outputs:
      ANDROID_URL: ${{ steps.check.outputs.ANDROID_URL }}
      IOS_URL: ${{ steps.check.outputs.IOS_URL }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Start EAS Build
        run: |
          PLATFORM=${{ github.event.inputs.platform || 'all' }}
          eas build --platform "$PLATFORM" --profile development --non-interactive --wait --json > build-info.json

      - name: Check build results and store URLs
        id: check
        run: |
          PLATFORM=${{ github.event.inputs.platform || 'all' }}

          get_url() {
            local platform=$1

            local status=$(jq -r --arg PLATFORM "$platform" '.[] | select(.platform == ($PLATFORM | ascii_upcase)) | .status' build-info.json)
            if [[ "$status" != "FINISHED" ]]; then
              echo "❌ Build $platform failed!"
              exit 1
            fi

            local url=$(jq -r --arg PLATFORM "$platform" '.[] | select(.platform == ($PLATFORM | ascii_upcase)) | .artifacts.buildUrl' build-info.json)
            echo "${platform^^}_URL=$url" >> $GITHUB_OUTPUT
          }

          if [[ "$PLATFORM" == "all" || "$PLATFORM" == "android" ]]; then
            get_url android
          fi
          if [[ "$PLATFORM" == "all" || "$PLATFORM" == "ios" ]]; then
            get_url ios
          fi

  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    needs: build

    outputs:
      CHANGELOG_BODY: ${{ steps.changelog.outputs.changes }}

    steps:
      - uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          writeToFile: false
          includeInvalidCommits: true
          excludeTypes: ""

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, changelog]
    if: ${{ github.event.inputs.create_release == 'true' || github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v4
  
      - name: Download and package artifacts
        id: package
        run: |
          ANDROID_FILE_NAME="clement-android-${{ github.ref_name }}"
          IOS_FILE_NAME="clement-ios-${{ github.ref_name }}"

          FILES=()

          if [[ -n "${{ needs.build.outputs.ANDROID_URL }}" ]]; then
            curl -L "${{ needs.build.outputs.ANDROID_URL }}" -o "${ANDROID_FILE_NAME}.apk"
            zip "${ANDROID_FILE_NAME}.zip" "${ANDROID_FILE_NAME}.apk"
            FILES+=("${ANDROID_FILE_NAME}.apk" "${ANDROID_FILE_NAME}.zip")
          fi

          if [[ -n "${{ needs.build.outputs.IOS_URL }}" ]]; then
            curl -L "${{ needs.build.outputs.IOS_URL }}" -o "${IOS_FILE_NAME}.ipa"
            zip "${IOS_FILE_NAME}.zip" "${IOS_FILE_NAME}.ipa"
            FILES+=("${IOS_FILE_NAME}.ipa" "${IOS_FILE_NAME}.zip")
          fi

          echo "files=${FILES[*]}" >> $GITHUB_OUTPUT

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: ${{ needs.changelog.outputs.CHANGELOG_BODY }}
          files: ${{ steps.package.outputs.files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
