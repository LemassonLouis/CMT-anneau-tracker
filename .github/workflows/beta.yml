name: Beta build and release

on:
  push:
    tags:
      - 'beta-*'

jobs:
  build_android:
    name: Build Android application
    runs-on: ubuntu-latest

    outputs:
      ANDROID_URL: ${{ steps.check.outputs.ANDROID_URL }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Start EAS Android build
        run: eas build --platform android --profile development --non-interactive --wait --json > build-info.json

      - name: Check build result and store URL
        id: check
        run: |
          status=$(jq -r '.[] | select(.platform == "ANDROID") | .status' build-info.json)

          if [[ "$status" != "FINISHED" ]]; then
            echo "❌ Android build failed !"
            exit 1
          fi

          url=$(jq -r '.[] | select(.platform == "ANDROID") | .artifacts.buildUrl' build-info.json)
          echo "ANDROID_URL=$url" >> $GITHUB_OUTPUT

  build_ios:
    name: Build iOS application
    runs-on: ubuntu-latest

    outputs:
      IOS_URL: ${{ steps.check.outputs.IOS_URL }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Start EAS iOS build
        run: eas build --platform ios --profile development --non-interactive --wait --json > build-info.json

      - name: Check build result and store URL
        id: check
        run: |
          status=$(jq -r '.[] | select(.platform == "IOS") | .status' build-info.json)

          if [[ "$status" != "FINISHED" ]]; then
            echo "❌ iOS build failed !"
            exit 1
          fi

          url=$(jq -r '.[] | select(.platform == "IOS") | .artifacts.buildUrl' build-info.json)
          echo "IOS_URL=$url" >> $GITHUB_OUTPUT

  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    needs: [build_android, build_ios]

    outputs:
      CHANGELOG_BODY: ${{ steps.changelog.outputs.changes }}

    steps:
      - uses: actions/checkout@v4

      - name: Generate changelog
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          writeToFile: false
          includeInvalidCommits: true
          excludeTypes: ""

  release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs: [build_android, build_ios, changelog]
    if: ${{ github.event.inputs.create_release == 'true' || github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v4

      - name: Download and package artifacts
        id: package
        run: |
          ANDROID_FILE_NAME="clement-android-${{ github.ref_name }}"
          IOS_FILE_NAME="clement-ios-${{ github.ref_name }}"

          if [[ -n "${{ needs.build_android.outputs.ANDROID_URL }}" ]]; then
            curl -L "${{ needs.build_android.outputs.ANDROID_URL }}" -o "${ANDROID_FILE_NAME}.apk"
            zip "${ANDROID_FILE_NAME}.zip" "${ANDROID_FILE_NAME}.apk"
          fi

          if [[ -n "${{ needs.build_ios.outputs.IOS_URL }}" ]]; then
            curl -L "${{ needs.build_ios.outputs.IOS_URL }}" -o "${IOS_FILE_NAME}.tar.gz"
          fi

          echo "ANDROID_FILE_NAME=$ANDROID_FILE_NAME" >> $GITHUB_ENV
          echo "IOS_FILE_NAME=$IOS_FILE_NAME" >> $GITHUB_ENV

      - name: Upload to GitHub release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: ${{ needs.changelog.outputs.CHANGELOG_BODY }}
          files: |
            ${{ env.ANDROID_FILE_NAME }}.apk
            ${{ env.ANDROID_FILE_NAME }}.zip
            ${{ env.IOS_FILE_NAME }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
